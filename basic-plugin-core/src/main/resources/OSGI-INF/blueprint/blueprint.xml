<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:cxf="http://cxf.apache.org/blueprint/core"
           xmlns:jaxrs="http://cxf.apache.org/blueprint/jaxrs"
           xmlns:jaxws="http://cxf.apache.org/blueprint/jaxws"
           xsi:schemaLocation="
                http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
                http://cxf.apache.org/blueprint/jaxws http://cxf.apache.org/schemas/blueprint/jaxws.xsd
                http://cxf.apache.org/blueprint/jaxrs http://cxf.apache.org/schemas/blueprint/jaxrs.xsd
                http://cxf.apache.org/blueprint/core http://cxf.apache.org/schemas/blueprint/core.xsd"
           default-timeout="20000"
           default-activation="lazy">

    <!-- ================================================================================================== -->
    <!-- CONFIG SETTINGS                                                                                    -->
    <!-- ================================================================================================== -->

    <cm:property-placeholder persistent-id="basic.plugin" update-strategy="reload">
        <cm:default-properties>

            <cm:property name="plugin.id" value="basic-plugin" />
            <cm:property name="edit.perspective" value="edit-mode" />

            <cm:property name="extension" value="properties" />
            <cm:property name="mimeType" value="text/plain" />
            <cm:property name="saySomething" value="Hello World!" />

            <cm:property name="perspective.title" value="BP Perspective" />

            <cm:property name="overlay.type" value="BUTTON_CREATE_NEW" />
            <cm:property name="overlay.id" value="launch" />
            <cm:property name="overlay.item.id" value="launch" />
            <cm:property name="overlay.command.id" value="Basic Plugin" />
            <cm:property name="overlay.command.label" value="Create a New Basic Plugin" />
            <cm:property name="overlay.command.uri" value="osgi/basic-plugin/resources/hello-world.properties" />

        </cm:default-properties>
    </cm:property-placeholder>


    <!-- ================================================================================================== -->
    <!-- GENERAL INTERFACE EXPORTS                                                                          -->
    <!-- ================================================================================================== -->


    <!-- =================================== -->
    <!-- Content Types                       -->
    <!-- =================================== -->

    <!--
        Register 'bp.content.info' bean as the IContentInfo implementation to handle all
        files with extension 'properties'; registered with 'plugin-id = basic-plugin'
     -->
    <!-- 'service' would be the equivalent of a (non-osgi) 'pen:publish' call -->
    <service ref="bp.content.info" interface="org.pentaho.platform.api.engine.IContentInfo" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
            <entry key="extension" value="${extension}" />
        </service-properties>
    </service>


    <!-- =================================== -->
    <!-- Content Generators                  -->
    <!-- =================================== -->

    <!--
        Register 'bp.content.generator' bean as the IContentGenerator implementation to handle all
        files with extension 'properties'; registered with 'plugin-id = basic-plugin'
     -->
    <!-- 'service' would be the equivalent of a (non-osgi) 'pen:publish' call -->


    <!-- register a IContentGenerator implementations for all default 'OPEN' actions ( /generatedContent ) -->
    <service ref="bp.content.generator" interface="org.pentaho.platform.api.engine.IContentGenerator" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
            <!-- this will handle all default /generatedContent for this content type -->
            <entry key="content-type" value="${extension}" />
        </service-properties>
    </service>


    <!-- register specific IContentGenerator implementations; this one handles the 'EDIT' action -->
    <service ref="bp.content.generator" interface="org.pentaho.platform.api.engine.IContentGenerator" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
            <!-- the selected 'EDIT' action perspective ID gets placed as the content type -->
            <entry key="content-type" value="${edit.perspective}" />
        </service-properties>
    </service>


    <!-- =================================== -->
    <!-- Static / External resources         -->
    <!-- =================================== -->


    <!-- register a IPlatformPlugin implementation -->
    <service ref="bp" interface="org.pentaho.platform.api.engine.IPlatformPlugin" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
        </service-properties>
    </service>


    <!-- =================================== -->
    <!-- Alternate Static Resources          -->
    <!-- =================================== -->

    <!-- HttpService Whiteboard registration of web assets -->
    <service id="bp.whiteboard.resources" interface="org.ops4j.pax.web.extender.whiteboard.ResourceMapping">
        <bean class="org.ops4j.pax.web.extender.whiteboard.runtime.DefaultResourceMapping">
            <!-- this translates to /<webapp_name>/osgi/<ALIAS>/<RESOURCE_FILENAME> -->
            <property name="alias" value="/${plugin.id}/resources"/>
            <property name="path" value="/resources"/>
        </bean>
    </service>

    <service id="bp.whiteboard.lang" interface="org.ops4j.pax.web.extender.whiteboard.ResourceMapping">
        <bean class="org.ops4j.pax.web.extender.whiteboard.runtime.DefaultResourceMapping">
            <!-- this translates to /<webapp_name>/osgi/<ALIAS>/<RESOURCE_FILENAME> -->
            <property name="alias" value="/${plugin.id}/lang"/>
            <property name="path" value="/lang"/>
        </bean>
    </service>


    <!-- ================================================================================================== -->
    <!-- GENERAL BEAN DECLARATIONS                                                                          -->
    <!-- ================================================================================================== -->

    <!-- Get the platform's IUnifiedRepository implementation. -->
    <!-- 'reference' would be the equivalent of a (non-osgi) 'pen:bean' call -->
    <reference id="repository" availability="optional" timeout="5000"
               interface="org.pentaho.platform.api.repository2.unified.IUnifiedRepository" />

    <!-- =================================== -->
    <!-- Content Generators                  -->
    <!-- =================================== -->

    <bean id="bp.settings" class="pt.webdetails.basic.plugin.BasicPluginSettings" activation="eager">
        <property name="extension" value="${extension}" />
        <property name="mimeType" value="${mimeType}" />
        <property name="saySomething" value="${saySomething}" />
    </bean>

    <!-- IContentGenerator implementation -->
    <bean id="bp.content.generator" class="pt.webdetails.basic.plugin.BasicPluginContentGenerator">
        <argument ref="bp.settings" />
        <argument ref="repository" />
    </bean>

    <!-- =================================== -->
    <!-- Content Types                       -->
    <!-- =================================== -->


    <bean id="bp.content.info" class="pt.webdetails.basic.plugin.platform.extensions.ContentInfoExtended">

        <!-- the file extension we'll become responsible for -->
        <property name="extension" value="${extension}" />

        <!-- the mimeType -->
        <property name="mimeType" value="${mimeType}" />

        <!-- the set of available operations for this file extension -->
        <property name="operations">

            <list value-type="org.pentaho.platform.api.engine.IPluginOperation">

                <!-- 'OPEN' action -->
                <bean class="org.pentaho.platform.engine.core.solution.PluginOperation">
                    <argument value="RUN" />
                    <!-- no perspective set: defaults to 'generatedContent' -->
                </bean>

                <!-- 'EDIT' action -->
                <bean class="org.pentaho.platform.engine.core.solution.PluginOperation">
                    <argument value="EDIT" />
                    <!-- set a perspective ( maps to: 'content-type' service property ) for the 'EDIT' action -->
                    <property name="perspective" value="${edit.perspective}" />
                </bean>

            </list>
        </property>
    </bean>


    <bean id="bp" class="pt.webdetails.basic.plugin.platform.extensions.PlatformPluginExtended">
        <property name="id" value="${plugin.id}" />

        <!-- =================================== -->
        <!-- Static Resources                    -->
        <!-- =================================== -->

        <property name="staticResourceMap">
            <map key-type="java.lang.String" value-type="java.lang.String">

                <!-- this translates to /<webapp_name>/api/repos/<ENTRY_KEY>/<STATIC_RESOURCE> -->
                <entry key="/${plugin.id}/resources" value="resources" />
            </map>
        </property>

        <!-- =================================== -->
        <!-- External Resources                  -->
        <!-- =================================== -->

        <property name="externalResourcesMap">
            <map key-type="java.lang.String" value-type="java.util.List">

                <entry key="mantle">
                    <list value-type="java.lang.String">
                        <!-- leveraging on a static resource endpoint declaration -->
                        <value>api/repos/basic-plugin/resources/basic-plugin-startup.js</value>
                    </list>
                </entry>

            </map>
        </property>

    </bean>


    <!-- =================================== -->
    <!-- REST Endpoints                      -->
    <!-- =================================== -->

    <!--
        Apache cxf framework supports service APIs like JAX-WS and JAX-RS.
        These services can speak a variety of protocols such as SOAP, XML/HTTP, RESTful HTTP,
        or CORBA and work over a variety of transports such as HTTP, JMS or JBI.
    -->
    <cxf:bus id="basicPluginCxfBus" />

    <!-- this translates to /<webapp_name>/osgi/cxf/<ADDRESS>/<ENDPOINT_TERMINATION> -->
    <jaxrs:server id="bp.cxf.jaxrs.service.endpoint" address="/${plugin.id}">
        <jaxrs:serviceBeans>
            <ref component-id="bp.cxf.rest.api" />
        </jaxrs:serviceBeans>
    </jaxrs:server>


    <!-- ws endpoints bean -->
    <bean id="bp.cxf.rest.api" class="pt.webdetails.basic.plugin.BasicPluginCxfRestAPI">
        <argument ref="bp.settings" />
        <argument ref="repository" />
    </bean>

    <!-- =================================== -->
    <!-- Perspective                         -->
    <!-- =================================== -->

    <!-- 'service' would be the equivalent of a (non-osgi) 'pen:publish' call -->
    <service ref="bp.perspective" interface="org.pentaho.platform.api.engine.perspective.pojo.IPluginPerspective" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
        </service-properties>
    </service>

    <bean id="bp.perspective" class="org.pentaho.platform.plugin.services.pluginmgr.perspective.pojo.DefaultPluginPerspective">
        <property name="id" value="${plugin.id}"/>
        <property name="title" value="${perspective.title}"/>
        <property name="contentUrl" value="osgi/${plugin.id}/resources/basic-plugin-startup.js"/>
        <property name="resourceBundleUri" value="osgi/${plugin.id}/lang/messages"/>
        <property name="requiredSecurityActions">
            <list>
                <value>org.pentaho.security.administerSecurity</value>
            </list>
        </property>
    </bean>

    <!-- =================================== -->
    <!-- Overlays                            -->
    <!-- =================================== -->

    <!-- 'service' would be the equivalent of a (non-osgi) 'pen:publish' call -->
    <service interface="org.pentaho.ui.xul.XulOverlay" activation="eager">
        <service-properties>
            <entry key="plugin-id" value="${plugin.id}" />
        </service-properties>
        <bean factory-ref="factory.overlay" factory-method="build" />
    </service>

    <bean id="factory.overlay" class="pt.webdetails.basic.plugin.platform.extensions.XulOverlayFactory" >
        <argument value="${overlay.type}" />
        <property name="resourceBundleUri" value="osgi/${plugin.id}/lang/messages" />
        <property name="overlayId" value="${overlay.id}" />
        <property name="itemId" value="${overlay.item.id}" />
        <property name="commandId" value="${overlay.command.id}" />
        <property name="commandLabel" value="${overlay.command.label}" />
        <property name="commandUri" value="${overlay.command.uri}" />
    </bean>

</blueprint>
